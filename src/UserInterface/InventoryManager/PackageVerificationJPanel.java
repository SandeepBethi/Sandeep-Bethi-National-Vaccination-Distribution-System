/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InventoryManager;

import Business.Business;
import Business.Carton;
import Business.VaccineHistory;
import Business.VaccinePackage;
import Business.Enterprise;
import Business.CDCEnterprise;
import Business.InventoryManagementOrg;
import Business.Network;
import Business.Organization;
import Business.Patient;
import Business.ReportCDCRequest;
import Business.RequestForVaccines;
import Business.ShippingRequest;
import Business.Transaction;
import Business.UserAccount;
import Business.WorkRequest;
import java.awt.CardLayout;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bethi
 */
public class PackageVerificationJPanel extends javax.swing.JPanel {

    Business b;
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    ShippingRequest sr;
    ArrayList<Carton> tempCartList;
    ArrayList<Carton> orderCartList;
    boolean filterFlag=false;
    InventoryWorkQueueJPanel iwq;

    /**
     * Creates new form InventorySentRequestJPanel
     */
    public PackageVerificationJPanel(JPanel upc, Business b, UserAccount ua, ShippingRequest sr,InventoryWorkQueueJPanel iwq) {
        initComponents();

        this.b = b;
        userProcessContainer = upc;
        userAccount = ua;
        this.sr = sr;
        this.iwq=iwq;
        
        tempCartList=new ArrayList<Carton>();
        orderCartList=new ArrayList<Carton>();
        for(Carton c:sr.getOrder().getCartonList()){
            orderCartList.add(c);
        }

        refreshWorkReqTable();
     JPanel panel = this;
        panel.setOpaque(false);
        panel.setPreferredSize(this.getPreferredSize());

    }
    ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/Resources/vaccine.jpg"));

    @Override
    protected void paintComponent(Graphics g) {
        g.drawImage(icon.getImage(), 0, 0, null);
        super.paintComponent(g);
    }

    private void refreshWorkReqTable() {
        int rowCount = workReqTable.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) workReqTable.getModel()).removeRow(i);

        }
        for(Carton c:orderCartList){



Object row[] = new Object[4];
            row[0] = c;
            row[1] = c.getCartonId();
            row[2] = c.getPackageList().size();
            String tempString=VaccinePackage.StatusType.Safe.toString();
            for(VaccinePackage dp:c.getPackageList()){
                if(!dp.getStatus().equals(VaccinePackage.StatusType.Safe.toString())){
                    tempString=dp.getStatus();
                }
                }
            row[3] = tempString;
            



            ((DefaultTableModel) workReqTable.getModel()).addRow(row);
        }

        if (workReqTable.getRowCount() > 0) {
            workReqTable.changeSelection(0, 0, true, true);
        }
    }
    private void refreshsuspectTable() {
        int rowCount = suspectedTable.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) suspectedTable.getModel()).removeRow(i);

        }
        


for(Carton c:tempCartList){

        for (VaccinePackage dPack : c.getPackageList()) {

            Object row[] = new Object[5];
            row[0] = dPack.getVaccine();
            row[1] = dPack.getPackageId();
            row[2] = dPack.getCartonId();
            row[3] = dPack.getDateOfExpiry().getTime().toString();
            row[4] = dPack.getStatus();


            ((DefaultTableModel) suspectedTable.getModel()).addRow(row);
        }}

        if (suspectedTable.getRowCount() > 0) {
            suspectedTable.changeSelection(0, 0, true, true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        suspectedTable = new javax.swing.JTable();
        buttonBack = new javax.swing.JButton();
        buttonFilter = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workReqTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonReportToFDA = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Order Verification");

        suspectedTable.setAutoCreateRowSorter(true);
        suspectedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Vaccine", "Package ID", "Carton ID", "Expiry Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(suspectedTable);

        buttonBack.setText("Process and go Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonFilter.setText("Filter and process to Inventory");
        buttonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFilterActionPerformed(evt);
            }
        });

        workReqTable.setAutoCreateRowSorter(true);
        workReqTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine", "Carton ID", "Size", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workReqTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Suspected Products");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("Note: Any carton with suspected products will automatically  be moved to the organization's Suspected Product Container on filtering.");

        buttonReportToFDA.setText("Report Suspect Packaging");
        buttonReportToFDA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReportToFDAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonReportToFDA)
                        .addGap(59, 59, 59)
                        .addComponent(buttonFilter))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(272, 272, 272)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonBack)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonFilter, buttonReportToFDA});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(136, 136, 136)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonFilter)
                    .addComponent(buttonReportToFDA))
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addComponent(buttonBack)
                .addGap(49, 49, 49))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(56, 56, 56)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(319, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonFilter, buttonReportToFDA});

    }// </editor-fold>//GEN-END:initComponents

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        
        if(!filterFlag){
         Enterprise ent1 = b.getNetDir().getNetworkByUserAccount(userAccount).getEnterpriseByUserAccount(userAccount);
            Organization o = ent1.getOrganizationByUserAccount(userAccount);

            InventoryManagementOrg io = (InventoryManagementOrg) o;
            
            for (Carton c : orderCartList) {
                boolean flag=false;
                for (VaccinePackage dPackage : c.getPackageList()) {
                    int counter=0;
                    boolean flag1=false;
                    C:  for (VaccineHistory dh : b.getTransactionHistory().getVaccineHistoryList()) {
                        
                        
                        if (dh.getdPackage() == dPackage) {
                            flag1=true;
                            counter++;
                            int s = dh.getTransactionList().size();
                            if (dh.getTransactionList().get(s - 1).getReceiver() != ent1) {
                                dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                                flag=true;
                                break C;
                            }
                            for (int q = 1; q < s; q++) {
                                if (dh.getTransactionList().get(q).getSender() != dh.getTransactionList().get(q - 1).getReceiver()) {
                                    dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                                    flag=true;
                                    break C;
                                }
                            }
                        }
                        
                    }
                    if(!flag1)
                    {
                        flag=true;
                        dPackage.setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                    }
                    if(counter>1)
                    {
                        for (VaccineHistory dh : b.getTransactionHistory().getVaccineHistoryList()) {
                            if(dh.getdPackage().getPackageId()==dPackage.getPackageId()){
                        dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                        }
                    }}
                     if(flag&&dPackage.getStatus().equals(VaccinePackage.StatusType.Safe.toString()))
                    {
                        dPackage.setStatus(VaccinePackage.StatusType.SuspectCarton.toString());
                    }
                }
            }
            

            for (Carton c : orderCartList) {
                boolean flag=false;
              for (VaccinePackage dPackage : c.getPackageList()) {  
                  if(!dPackage.getStatus().equals(VaccinePackage.StatusType.Safe.toString())){
                flag=true;
            }}
              if(!flag)
                    {
            io.getInvCatalog().addCarton(c);
                    }else{
                  tempCartList.add(c);
                  io.getInvCatalog().addSuspectedCarton(c);
              }
            }
            //
            refreshsuspectTable();
            //

            //

            //

            refreshWorkReqTable();
            sr.setStatus(WorkRequest.StatusType.Resolved.toString());
        }
        iwq.refreshWorkReqTable();
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFilterActionPerformed
        

        
         if(!filterFlag){

            Enterprise ent1 = b.getNetDir().getNetworkByUserAccount(userAccount).getEnterpriseByUserAccount(userAccount);
            Organization o = ent1.getOrganizationByUserAccount(userAccount);

            InventoryManagementOrg io = (InventoryManagementOrg) o;
            
            for (Carton c : orderCartList) {
                boolean flag=false;
                for (VaccinePackage dPackage : c.getPackageList()) {
                    int counter=0;
                    boolean flag1=false;
                    C:  for (VaccineHistory dh : b.getTransactionHistory().getVaccineHistoryList()) {
                        
                        
                        if (dh.getdPackage() == dPackage) {
                            flag1=true;
                            counter++;
                            int s = dh.getTransactionList().size();
                            if (dh.getTransactionList().get(s - 1).getReceiver() != ent1) {
                                dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                                flag=true;
                                break C;
                            }
                            for (int q = 1; q < s; q++) {
                                if (dh.getTransactionList().get(q).getSender() != dh.getTransactionList().get(q - 1).getReceiver()) {
                                    dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                                    flag=true;
                                    break C;
                                }
                            }
                        }
                        
                    }
                    if(!flag1)
                    {
                        flag=true;
                        dPackage.setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                    }
                    if(counter>1)
                    {
                        for (VaccineHistory dh : b.getTransactionHistory().getVaccineHistoryList()) {
                            if(dh.getdPackage().getPackageId()==dPackage.getPackageId()){
                        dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                        }
                    }}
                     if(flag&&dPackage.getStatus().equals(VaccinePackage.StatusType.Safe.toString()))
                    {
                        dPackage.setStatus(VaccinePackage.StatusType.SuspectCarton.toString());
                    }
                }
            }
            

            for (Carton c : orderCartList) {
                boolean flag=false;
              for (VaccinePackage dPackage : c.getPackageList()) {  
                  if(!dPackage.getStatus().equals(VaccinePackage.StatusType.Safe.toString())){
                flag=true;
            }}
              if(!flag)
                    {
            io.getInvCatalog().addCarton(c);
                    }else{
                  tempCartList.add(c);
                  io.getInvCatalog().addSuspectedCarton(c);
              }
            }
            //
            refreshsuspectTable();
            //

            //

            //

            refreshWorkReqTable();
            buttonReportToFDA.setEnabled(false);
            filterFlag=true;
            sr.setStatus(WorkRequest.StatusType.Resolved.toString());
        }
        
    }//GEN-LAST:event_buttonFilterActionPerformed

    private void buttonReportToFDAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReportToFDAActionPerformed
    int selectetedRow = workReqTable.getSelectedRow();
if(selectetedRow<0){
    JOptionPane.showMessageDialog(userProcessContainer,"Select a request", "Select request", 0);
    return;
}

Carton c=(Carton)workReqTable.getValueAt(selectetedRow, 0);

for(Network n:b.getNetDir().getNetworkList()){
    for(Enterprise ent:n.getEntDirectory().getEnterpriseList()){
        if(ent.getClass().equals(CDCEnterprise.class)){
            CDCEnterprise fent=(CDCEnterprise)ent;
            ReportCDCRequest rfr=new ReportCDCRequest();
            fent.getInvestigationOrg().getWorkQueue().addWR(rfr);
            Enterprise myEnt=b.getNetDir().getNetworkByUserAccount(userAccount).getEnterpriseByUserAccount(userAccount);
            InventoryManagementOrg im=(InventoryManagementOrg)b.getNetDir().getNetworkByUserAccount(userAccount).getEnterpriseByUserAccount(userAccount).getOrganizationByUserAccount(userAccount);
            im.getSentWorkQueue().addWR(rfr);
            
            rfr.addCarton(c);
            
            im.getInvCatalog().getSuspectedCartonList().add(c);
            im.getInvCatalog().getSuspectedCartonList().remove(c);
            orderCartList.remove(c);
            
            rfr.setSender(userAccount);
            rfr.setDestination(fent);
            rfr.setSource(myEnt);
            rfr.setStatus(WorkRequest.StatusType.SentToFDA.toString());
            rfr.setReasonForReporting("Suspect Packaging");
        }
        
    }
}
        

            refreshWorkReqTable();

    }//GEN-LAST:event_buttonReportToFDAActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonFilter;
    private javax.swing.JButton buttonReportToFDA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable suspectedTable;
    private javax.swing.JTable workReqTable;
    // End of variables declaration//GEN-END:variables
}
