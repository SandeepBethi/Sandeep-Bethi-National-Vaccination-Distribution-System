/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InventoryManager;

import Business.Business;
import Business.Carton;
import Business.Vaccine;
import Business.VaccineHistory;
import Business.VaccinePackage;
import Business.Enterprise;
import Business.InventoryManagementOrg;
import Business.ManufacturerEnterprise;
import Business.Network;
import Business.Organization;
import Business.RequestForVaccines;
import Business.LabTestingRequest;
import Business.UserAccount;
import Business.WorkRequest;
import java.awt.CardLayout;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bethi
 */
public class InventoryCatalogJPanel extends javax.swing.JPanel {

    Business b;
    private JPanel userProcessContainer;
    private UserAccount userAccount;

    /**
     * Creates new form InventorySentRequestJPanel
     */
    public InventoryCatalogJPanel(JPanel upc, Business b, UserAccount ua) {
        initComponents();

        this.b=b;
        userProcessContainer = upc;
        userAccount = ua;

        refreshWorkReqTable();
     JPanel panel = this;
        panel.setOpaque(false);
        panel.setPreferredSize(this.getPreferredSize());

    }
    ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/Resources/vaccine11.jpg"));

    @Override
    protected void paintComponent(Graphics g) {
        g.drawImage(icon.getImage(), 0, 0, null);
        super.paintComponent(g);
    }

    private void refreshWorkReqTable() {
        int rowCount = workReqTable.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) workReqTable.getModel()).removeRow(i);

        }
        InventoryManagementOrg o=(InventoryManagementOrg)b.getNetDir().getNetworkByUserAccount(userAccount).getEnterpriseByUserAccount(userAccount).getOrganizationByUserAccount(userAccount);
        for (Network net : b.getNetDir().getNetworkList()) {
            for (Enterprise ent: net.getEntDirectory().getEnterpriseList()) {
                if(ent.getClass().equals(ManufacturerEnterprise.class)){
                    ManufacturerEnterprise ment=(ManufacturerEnterprise)ent;
                
        
        for (Vaccine d : ment.getDmo().getVaccinecatalog().getVaccineList()) {
            int vaccineQ=0;
            
            String tempString=VaccinePackage.StatusType.Safe.toString();
        for (Carton carton : o.getInvCatalog().getCartonList()) {
            
            if(carton.getPackageList().get(0).getVaccine()==d){
                for(VaccinePackage dp:carton.getPackageList()){
                vaccineQ++;
                if(!dp.getStatus().equals(VaccinePackage.StatusType.Safe.toString())){
                    
                    tempString=dp.getStatus();
                }
                }
                }
            
        }
        if(vaccineQ>0){
                Object row[] = new Object[5];
            row[0] = d;
            row[1] = vaccineQ;
            row[2] = d.getType();
            row[3] = d.getWeight();
            
            row[4] = tempString;
            
                
                ((DefaultTableModel) workReqTable.getModel()).addRow(row);
        }
        }}}}
        if (workReqTable.getRowCount() > 0) {
            workReqTable.changeSelection(0, 0, true, true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workReqTable = new javax.swing.JTable();
        buttonBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Inventory Catalog");

        workReqTable.setAutoCreateRowSorter(true);
        workReqTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Vaccine", "Quantity", "Type", "Weight", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workReqTable);

        buttonBack.setText("back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        jButton1.setText("Filter Inventory for suspect Vaccines");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(buttonBack))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(272, 272, 272)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(buttonBack)
                .addGap(67, 67, 67))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_buttonBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
Enterprise ent1 = b.getNetDir().getNetworkByUserAccount(userAccount).getEnterpriseByUserAccount(userAccount);
            Organization o = ent1.getOrganizationByUserAccount(userAccount);

            InventoryManagementOrg io = (InventoryManagementOrg) o;
            ArrayList<Carton> orderCartList=new ArrayList<Carton>();
            
            for(Carton c:io.getInvCatalog().getCartonList()){
                orderCartList.add(c);
            }
            
            for (Carton c : orderCartList) {
                boolean flag=false;
                for (VaccinePackage dPackage : c.getPackageList()) {
                    int counter=0;
                    boolean flag1=false;
                    C:  for (VaccineHistory dh : b.getTransactionHistory().getVaccineHistoryList()) {
                        
                        
                        if (dh.getdPackage() == dPackage) {
                            flag1=true;
                            counter++;
                            int s = dh.getTransactionList().size();
                            if (dh.getTransactionList().get(s - 1).getReceiver() != ent1) {
                                dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                                flag=true;
                                break C;
                            }
                            for (int q = 1; q < s; q++) {
                                if (dh.getTransactionList().get(q).getSender() != dh.getTransactionList().get(q - 1).getReceiver()) {
                                    dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                                    flag=true;
                                    break C;
                                }
                            }
                        }
                        
                    }
                    if(!flag1)
                    {
                        flag=true;
                        dPackage.setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                    }
                    if(counter>1)
                    {
                        for (VaccineHistory dh : b.getTransactionHistory().getVaccineHistoryList()) {
                            if(dh.getdPackage().getPackageId()==dPackage.getPackageId()){
                        dh.getdPackage().setStatus(VaccinePackage.StatusType.SuspectCounterfeit.toString());
                        }
                    }}
                     if(flag&&dPackage.getStatus().equals(VaccinePackage.StatusType.Safe.toString()))
                    {
                        dPackage.setStatus(VaccinePackage.StatusType.SuspectCarton.toString());
                    }
                }
            }
            
            for (Carton c : orderCartList) {
                boolean flag=false;
              for (VaccinePackage dPackage : c.getPackageList()) {  
                  if(!dPackage.getStatus().equals(VaccinePackage.StatusType.Safe.toString())){
                flag=true;
            }}
              if(flag)
                    {
            
                  
                  io.getInvCatalog().addSuspectedCarton(c);
                  io.getInvCatalog().getCartonList().remove(c);
              }
            }
            refreshWorkReqTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workReqTable;
    // End of variables declaration//GEN-END:variables
}
